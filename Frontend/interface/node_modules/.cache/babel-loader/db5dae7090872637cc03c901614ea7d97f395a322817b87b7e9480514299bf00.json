{"ast":null,"code":"var _jsxFileName = \"D:\\\\Medicine Recommendation\\\\Frontend\\\\interface\\\\src\\\\components\\\\SymptomInput.js\",\n  _s = $RefreshSig$();\n// SymptomInput.js\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SymptomInput = ({\n  onSubmit\n}) => {\n  _s();\n  const [symptoms, setSymptoms] = useState('');\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch('http://localhost:8000/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          symptoms\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      const data = await response.json();\n      setPredictedValues(data.predictedValues); // Assuming this is how you set state\n    } catch (error) {\n      console.error('Error fetching data:', error);\n      // Handle error state or show error message to user\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleSubmit,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter symptoms separated by commas\",\n      value: symptoms,\n      onChange: e => setSymptoms(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"submit\",\n      children: \"Predict Disease\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(SymptomInput, \"hQrrcipfO3hVt5dMh9Jt/6PDQFY=\");\n_c = SymptomInput;\nexport default SymptomInput;\nvar _c;\n$RefreshReg$(_c, \"SymptomInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SymptomInput","onSubmit","_s","symptoms","setSymptoms","handleSubmit","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","setPredictedValues","predictedValues","error","console","children","type","placeholder","value","onChange","e","target","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Medicine Recommendation/Frontend/interface/src/components/SymptomInput.js"],"sourcesContent":["// SymptomInput.js\r\n\r\nimport React, { useState } from 'react';\r\n\r\nconst SymptomInput = ({ onSubmit }) => {\r\n  const [symptoms, setSymptoms] = useState('');\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8000/predict', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ symptoms }),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Network response was not ok');\r\n      }\r\n  \r\n      const data = await response.json();\r\n      setPredictedValues(data.predictedValues); // Assuming this is how you set state\r\n    } catch (error) {\r\n      console.error('Error fetching data:', error);\r\n      // Handle error state or show error message to user\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Enter symptoms separated by commas\"\r\n        value={symptoms}\r\n        onChange={(e) => setSymptoms(e.target.value)}\r\n      />\r\n      <button type=\"submit\">Predict Disease</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SymptomInput;\r\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAE5C,MAAMQ,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;QAC5DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAET;QAAS,CAAC;MACnC,CAAC,CAAC;MAEF,IAAI,CAACG,QAAQ,CAACO,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MAEA,MAAMC,IAAI,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,CAAC;MAClCC,kBAAkB,CAACF,IAAI,CAACG,eAAe,CAAC,CAAC,CAAC;IAC5C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C;IACF;EACF,CAAC;EAGD,oBACEpB,OAAA;IAAME,QAAQ,EAAEI,YAAa;IAAAgB,QAAA,gBAC3BtB,OAAA;MACEuB,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,oCAAoC;MAChDC,KAAK,EAAErB,QAAS;MAChBsB,QAAQ,EAAGC,CAAC,IAAKtB,WAAW,CAACsB,CAAC,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACFhC,OAAA;MAAQuB,IAAI,EAAC,QAAQ;MAAAD,QAAA,EAAC;IAAe;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEX,CAAC;AAAC7B,EAAA,CArCIF,YAAY;AAAAgC,EAAA,GAAZhC,YAAY;AAuClB,eAAeA,YAAY;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}