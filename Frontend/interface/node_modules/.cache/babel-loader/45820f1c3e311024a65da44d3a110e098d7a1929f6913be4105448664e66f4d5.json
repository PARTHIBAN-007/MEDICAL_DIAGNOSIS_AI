{"ast":null,"code":"var _jsxFileName = \"D:\\\\Medicine Recommendation\\\\Frontend\\\\interface\\\\src\\\\components\\\\SymptomInput.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SymptomInput = () => {\n  _s();\n  // Initialize state\n  const [predictedValues, setPredictedValues] = useState([]);\n\n  // Function to handle form submission\n  const handleSubmit = async event => {\n    event.preventDefault();\n    const symptoms = event.target.elements.symptoms.value; // Get input value\n\n    const response = await fetch('http://localhost:8000/predict', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        symptoms\n      }) // Send symptoms to server\n    });\n    if (!response.ok) {\n      // Handle error if response is not okay (optional)\n      console.error('Failed to fetch data');\n      return;\n    }\n    const data = await response.json(); // Parse JSON response\n\n    // Update state with predicted values from API response\n    setPredictedValues(data.predictedValues);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        name: \"symptoms\",\n        placeholder: \"Enter symptoms...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), predictedValues.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Predicted Values:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: predictedValues.map((value, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: value\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(SymptomInput, \"sk9xtl4w8Sjyjvcs0IBzHXxaFtM=\");\n_c = SymptomInput;\nexport default SymptomInput;\nvar _c;\n$RefreshReg$(_c, \"SymptomInput\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SymptomInput","_s","predictedValues","setPredictedValues","handleSubmit","event","preventDefault","symptoms","target","elements","value","response","fetch","method","headers","body","JSON","stringify","ok","console","error","data","json","children","onSubmit","type","name","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","length","map","index","_c","$RefreshReg$"],"sources":["D:/Medicine Recommendation/Frontend/interface/src/components/SymptomInput.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst SymptomInput = () => {\r\n  // Initialize state\r\n  const [predictedValues, setPredictedValues] = useState([]);\r\n\r\n  // Function to handle form submission\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n    \r\n    const symptoms = event.target.elements.symptoms.value; // Get input value\r\n    \r\n    const response = await fetch('http://localhost:8000/predict', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({ symptoms }), // Send symptoms to server\r\n    });\r\n    \r\n    if (!response.ok) {\r\n      // Handle error if response is not okay (optional)\r\n      console.error('Failed to fetch data');\r\n      return;\r\n    }\r\n    \r\n    const data = await response.json(); // Parse JSON response\r\n    \r\n    // Update state with predicted values from API response\r\n    setPredictedValues(data.predictedValues);\r\n  };\r\n  \r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        {/* Form input fields */}\r\n        <input type=\"text\" name=\"symptoms\" placeholder=\"Enter symptoms...\" />\r\n        <button type=\"submit\">Submit</button>\r\n      </form>\r\n\r\n      {/* Display predicted values */}\r\n      {predictedValues.length > 0 && (\r\n        <div>\r\n          {/* Render predicted values */}\r\n          <h2>Predicted Values:</h2>\r\n          <ul>\r\n            {predictedValues.map((value, index) => (\r\n              <li key={index}>{value}</li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SymptomInput;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB;EACA,MAAM,CAACC,eAAe,EAAEC,kBAAkB,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;;EAE1D;EACA,MAAMO,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;IAEtB,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAACC,QAAQ,CAACF,QAAQ,CAACG,KAAK,CAAC,CAAC;;IAEvD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,+BAA+B,EAAE;MAC5DC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEV;MAAS,CAAC,CAAC,CAAE;IACtC,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACO,EAAE,EAAE;MAChB;MACAC,OAAO,CAACC,KAAK,CAAC,sBAAsB,CAAC;MACrC;IACF;IAEA,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;;IAEpC;IACAnB,kBAAkB,CAACkB,IAAI,CAACnB,eAAe,CAAC;EAC1C,CAAC;EAED,oBACEH,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAMyB,QAAQ,EAAEpB,YAAa;MAAAmB,QAAA,gBAE3BxB,OAAA;QAAO0B,IAAI,EAAC,MAAM;QAACC,IAAI,EAAC,UAAU;QAACC,WAAW,EAAC;MAAmB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eACrEhC,OAAA;QAAQ0B,IAAI,EAAC,QAAQ;QAAAF,QAAA,EAAC;MAAM;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjC,CAAC,EAGN7B,eAAe,CAAC8B,MAAM,GAAG,CAAC,iBACzBjC,OAAA;MAAAwB,QAAA,gBAEExB,OAAA;QAAAwB,QAAA,EAAI;MAAiB;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAC1BhC,OAAA;QAAAwB,QAAA,EACGrB,eAAe,CAAC+B,GAAG,CAAC,CAACvB,KAAK,EAAEwB,KAAK,kBAChCnC,OAAA;UAAAwB,QAAA,EAAiBb;QAAK,GAAbwB,KAAK;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAa,CAC5B;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC9B,EAAA,CApDID,YAAY;AAAAmC,EAAA,GAAZnC,YAAY;AAsDlB,eAAeA,YAAY;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}