{"ast":null,"code":"var _jsxFileName = \"D:\\\\Medicine Recommendation\\\\Frontend\\\\interface\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport TitleBar from './components/TitleBar';\nimport SymptomInput from './components/SymptomInput';\nimport PredictedResults from './components/PredictedResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [predictedDisease, setPredictedDisease] = useState(null);\n  const handleSubmit = symptoms => {\n    // Here you can implement your logic to send symptoms to the backend and fetch predicted disease\n    // For now, simulate a predicted disease\n    const mockPredictedDisease = 'Fungal infection'; // Replace with actual fetched data\n    setPredictedDisease(mockPredictedDisease);\n  };\n  const handleReset = () => {\n    setPredictedDisease(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(TitleBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), !predictedDisease ? /*#__PURE__*/_jsxDEV(SymptomInput, {\n      onSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(PredictedResults, {\n      predictedDisease: predictedDisease,\n      onReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"BlC7XBrRi8ZpcJyAouc22pXBZXE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","TitleBar","SymptomInput","PredictedResults","jsxDEV","_jsxDEV","App","_s","predictedDisease","setPredictedDisease","handleSubmit","symptoms","mockPredictedDisease","handleReset","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","onReset","_c","$RefreshReg$"],"sources":["D:/Medicine Recommendation/Frontend/interface/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport TitleBar from './components/TitleBar';\nimport SymptomInput from './components/SymptomInput';\nimport PredictedResults from './components/PredictedResults';\n\nconst App = () => {\n  const [predictedDisease, setPredictedDisease] = useState(null);\n\n  const handleSubmit = (symptoms) => {\n    // Here you can implement your logic to send symptoms to the backend and fetch predicted disease\n    // For now, simulate a predicted disease\n    const mockPredictedDisease = 'Fungal infection'; // Replace with actual fetched data\n    setPredictedDisease(mockPredictedDisease);\n  };\n\n  const handleReset = () => {\n    setPredictedDisease(null);\n  };\n\n  return (\n    <div className=\"App\">\n      <TitleBar />\n      {!predictedDisease ? (\n        <SymptomInput onSubmit={handleSubmit} />\n      ) : (\n        <PredictedResults predictedDisease={predictedDisease} onReset={handleReset} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,uBAAuB;AAC5C,OAAOC,YAAY,MAAM,2BAA2B;AACpD,OAAOC,gBAAgB,MAAM,+BAA+B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChB,MAAM,CAACC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE9D,MAAMU,YAAY,GAAIC,QAAQ,IAAK;IACjC;IACA;IACA,MAAMC,oBAAoB,GAAG,kBAAkB,CAAC,CAAC;IACjDH,mBAAmB,CAACG,oBAAoB,CAAC;EAC3C,CAAC;EAED,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBJ,mBAAmB,CAAC,IAAI,CAAC;EAC3B,CAAC;EAED,oBACEJ,OAAA;IAAKS,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBV,OAAA,CAACJ,QAAQ;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EACX,CAACX,gBAAgB,gBAChBH,OAAA,CAACH,YAAY;MAACkB,QAAQ,EAAEV;IAAa;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,gBAExCd,OAAA,CAACF,gBAAgB;MAACK,gBAAgB,EAAEA,gBAAiB;MAACa,OAAO,EAAER;IAAY;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC9E;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACZ,EAAA,CAxBID,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AA0BT,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}